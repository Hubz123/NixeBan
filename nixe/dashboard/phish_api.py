import os\nimport os, json, time\nfrom flask import Blueprint, request, jsonify\nfrom PIL import Image\n# v20: try import imagehash; fallback to Pillow-only aHash to avoid ImportError during smoketests\ntry:\n    import imagehash as _imagehash_mod  # pip install ImageHash\n    def compute_hash(_img):\n        return str(_imagehash_mod.phash(_img))\nexcept Exception:\n    from PIL import Image as _Image  # ensure PIL is available\n    def compute_hash(_img):\n        # Simple average hash (8x8) fallback; deterministic but not as robust as phash\n        g = _img.convert("L").resize((8, 8))\n        px = list(g.getdata())\n        avg = sum(px) / len(px) if px else 0\n        bits = ''.join('1' if p > avg else '0' for p in px)\n        try:\n            return format(int(bits, 2), '016x')\n        except Exception:\n            # Edge case: if conversion fails, return zero hash of length 16\n            return '0'*16\n\n\nDATA_DIR = os.environ.get("SATPAMBOT_DATA_DIR", "data")\nPHASH_JSON = os.path.join(DATA_DIR, "phish_phash.json")\nHASH_TXT = os.environ.get("SATPAMBOT_PHASH_TXT", "blacklist_image_hashes.txt")\n\nphish_api = Blueprint("phish_api", __name__)\n\ndef _ensure_files():\n    os.makedirs(DATA_DIR, exist_ok=True)\n    if not os.path.exists(PHASH_JSON):\n        with open(PHASH_JSON, "w", encoding="utf-8") as f:\n            json.dump({"hashes": []}, f, ensure_ascii=False)\n    if not os.path.exists(HASH_TXT):\n        open(HASH_TXT, "a", encoding="utf-8").close()\n\ndef _load():\n    _ensure_files()\n    with open(PHASH_JSON, "r", encoding="utf-8") as f:\n        try:\n            data = json.load(f)\n        except json.JSONDecodeError:\n            data = {"hashes": []}\n    return data\n\ndef _save(data):\n    with open(PHASH_JSON, "w", encoding="utf-8") as f:\n        json.dump(data, f, ensure_ascii=False, indent=2)\n\n@phish_api.route("/dashboard/api/phash/list", methods=["GET"])\ndef phash_list():\n    data = _load()\n    return jsonify({"total": len(data.get("hashes", [])), "hashes": data.get("hashes", [])})\n\n@phish_api.route("/dashboard/api/phash/upload", methods=["POST"])\ndef phash_upload():\n    _ensure_files()\n    files = []\n    if request.files:\n        for k in request.files:\n            fs = request.files.getlist(k)\n            files.extend(fs)\n    if not files:\n        return jsonify({"error": "no files"}), 400\n\n    data = _load()\n    known = set([h["hash"] if isinstance(h, dict) else h for h in data.get("hashes", [])])\n    added, skipped = [], []\n\n    for f in files:\n        try:\n            img = Image.open(f.stream).convert("RGB")\n            ph = str(compute_hash(img))\n            if ph in known:\n                skipped.append(ph)\n                continue\n            item = {"hash": ph, "filename": f.filename, "ts": int(time.time())}\n            data.setdefault("hashes", []).append(item)\n            known.add(ph)\n            added.append(item)\n        except Exception:\n            skipped.append(f"{f.filename or 'file'}:error")\n            continue\n\n    _save(data)\n\n    try:\n        with open(HASH_TXT, "w", encoding="utf-8") as out:\n            for it in data["hashes"]:\n                out.write((it["hash"] if isinstance(it, dict) else str(it)) + "\n")\n    except Exception:\n        pass\n\n    return jsonify({"added": added, "skipped": skipped, "total": len(data.get("hashes", []))})\n\ndef register_phish_routes(app):\n    app.register_blueprint(phish_api)
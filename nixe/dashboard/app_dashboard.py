\nimport os\nimport os, time, json\nfrom pathlib import Path\nfrom flask import jsonify, redirect, send_from_directory, request\n\n# ---- healthz/ping log silencer ----\nimport logging\ndef _install_health_log_filter():\n    try:\n        class _HealthzFilter(logging.Filter):\n            def filter(self, record):\n                try:\n                    msg = record.getMessage()\n                except Exception:\n                    msg = str(record.msg)\n                return ("/healthz" not in msg) and ("/health" not in msg) and ("/ping" not in msg)\n        logging.getLogger("werkzeug").addFilter(_HealthzFilter())\n        logging.getLogger("gunicorn.access").addFilter(_HealthzFilter())\n    except Exception:\n        pass\n\n# ---- Dashboard extras: aliases, uploads, bans, static ----\ndef _register_dashboard_extras(app):\n    UPLOAD_DIR = Path(__file__).with_name("static") / "uploads"\n    try:\n        UPLOAD_DIR.mkdir(parents=True, exist_ok=True)\n    except Exception:\n        pass\n\n    ALLOWED = {".png",".jpg",".jpeg",".gif",".svg",".webp"}\n\n    def _cfg_read():\n        ui = Path(__file__).with_name("ui_local.json")\n        try:\n            if ui.exists():\n                return json.loads(ui.read_text("utf-8"))\n        except Exception:\n            pass\n        return {}\n\n    def _cfg_write(d):\n        ui = Path(__file__).with_name("ui_local.json")\n        try:\n            ui.write_text(json.dumps(d, ensure_ascii=False, indent=2), encoding="utf-8")\n        except Exception:\n            pass\n\n    @app.post("/dashboard/settings/upload")\n    def _settings_upload():\n        f = request.files.get("file")\n        kind = (request.form.get("type") or "").strip().lower()\n        if not f or not kind:\n            return jsonify({"ok": False, "error": "file/type required"}), 400\n        ext = os.path.splitext(f.filename or "")[1].lower()\n        if ext not in ALLOWED:\n            return jsonify({"ok": False, "error":"bad file type"}), 400\n        name = f"{int(time.time())}_{(f.filename or 'file').replace(' ','_')}"\n        path = UPLOAD_DIR / name\n        try:\n            f.save(path)\n        except Exception as e:\n            return jsonify({"ok": False, "error": str(e)}), 500\n        url = f"/dashboard-static/uploads/{name}"\n        cfg = _cfg_read()\n        if kind == "logo": cfg["logo"] = url\n        if kind == "background": cfg["bg_url"] = url\n        _cfg_write(cfg)\n        return jsonify({"ok": True, "url": url})\n\n    @app.get("/dashboard-static/uploads/<path:fname>")\n    def _static_uploads(fname):\n        return send_from_directory(str(UPLOAD_DIR), fname)\n\n    @app.get("/dashboard/api/metrics")\n    def _api_metrics():\n        # Try call handler /api/live/stats jika ada\n        vf = app.view_functions.get("api_live_stats")\n        if vf:\n            try:\n                return vf()\n            except Exception:\n                pass\n        return jsonify({\n            "guilds": 0, "members": 0, "channels": 0, "threads": 0,\n            "online": 0, "latency_ms": 0, "updated": int(time.time())\n        })\n\n    @app.get("/dashboard/tasks")\n    def _alias_tasks():\n        return redirect("/dashboard", code=302)\n\n    @app.get("/dashboard/options")\n    def _alias_options():\n        return redirect("/dashboard/settings", code=302)\n\n    @app.get("/dashboard/api/bans")\n    def _api_bans():\n        limit = int((request.args.get("limit") or 10))\n        cands = [\n            Path("data/mod/ban_log.json"),\n            Path("data/ban_log.json"),\n            Path("data/mod/bans.json"),\n        ]\n        recs = []\n        for p in cands:\n            try:\n                if p.exists():\n                    data = json.loads(p.read_text("utf-8"))\n                    if isinstance(data, dict) and "items" in data: data = data["items"]\n                    if isinstance(data, list): recs.extend(data)\n            except Exception:\n                pass\n        def norm(x):\n            user = x.get("user") or x.get("username") or x.get("tag") or ""\n            uid  = x.get("user_id") or x.get("id")\n            when = x.get("when") or ""\n            if not when:\n                ts = x.get("ts") or x.get("timestamp") or x.get("time")\n                try:\n                    from datetime import datetime, timezone, timedelta\n                    if isinstance(ts, (int,float)):\n                        wib = datetime.fromtimestamp(int(ts), tz=timezone.utc) + timedelta(hours=7)\n                    else:\n                        wib = datetime.fromisoformat(str(ts).replace("Z","+00:00")) + timedelta(hours=7)\n                    when = wib.strftime("%A, %d/%m/%y")\n                except Exception:\n                    when = ""\n            return {"user": user, "user_id": uid, "when_str": when}\n        recs = [norm(r) for r in recs][-limit:]\n        return jsonify(recs)\n\n# === SATPAM PATCH (APPEND-ONLY) â€” jangan hapus kode di atas ===\nimport os as _satp_os\nfrom flask import Response as _satp_Response\n\ndef _satp_route_exists(_app, _path: str) -> bool:\n    try:\n        for r in _app.url_map.iter_rules():\n            if r.rule == _path:\n                return True\n    except Exception:\n        pass\n    return False\n\ndef _satp_bind_health(_app):\n    # /healthz\n    if not _satp_route_exists(_app, "/healthz"):\n        @_app.route("/healthz", methods=["GET","HEAD"])\n        def __satp_healthz_ok():\n            return _satp_Response(status=200)\n    # /uptime\n    if not _satp_route_exists(_app, "/uptime"):\n        @_app.route("/uptime", methods=["GET","HEAD"])\n        def __satp_uptime_ok():\n            return _satp_Response(status=200)\n    # alias /login -> /dashboard/login (biar gak 404)\n    if not _satp_route_exists(_app, "/login"):\n        @_app.get("/login")\n        def __satp_login_alias():\n            from flask import redirect, url_for\n            return redirect(url_for("dashboard.login"))\n\n# panggil ke instance app yang sudah ada di file kamu\ntry:\n    _satp_bind_health(app)\nexcept NameError:\n    pass\n\n# kalau file ini dijalankan langsung, tetap hormati PORT\nif __name__ == "__main__":\n    try:\n        _satp_port = int(_satp_os.getenv("PORT", "10000"))\n        app.run(host="0.0.0.0", port=_satp_port, debug=False)\n    except Exception:\n        pass\n# === END PATCH ===
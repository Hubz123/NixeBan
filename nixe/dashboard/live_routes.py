import os\nfrom __future__ import annotations\n\nimport os, io, json, time\nfrom flask import Blueprint, request, jsonify\nfrom PIL import Image\n\napi_bp = Blueprint("api", __name__, url_prefix="/api")\n\ntry:\n    import imagehash\nexcept Exception:\n    imagehash = None\n\ndef _json_path() -> str:\n    p = os.getenv("PHISH_PHASH_JSON", "phish_phash.json")\n    data_dir = os.path.join(os.getcwd(), "data")\n    if os.path.isdir(data_dir) and not os.path.isabs(p):\n        p = os.path.join(data_dir, p)\n    dirp = os.path.dirname(p)\n    if dirp:\n        os.makedirs(dirp, exist_ok=True)\n    return p\n\ndef _load_json() -> dict:\n    p = _json_path()\n    if os.path.exists(p):\n        with open(p, "r", encoding="utf-8") as f:\n            try: return json.load(f)\n            except Exception: return {}\n    return {}\n\ndef _save_json(d: dict) -> None:\n    with open(_json_path(), "w", encoding="utf-8") as f:\n        json.dump(d, f, indent=2, ensure_ascii=False)\n\n@api_bp.post("/phish/phash")\ndef add_phash():\n    if not imagehash:\n        return jsonify({"ok": False, "error": "imagehash/Pillow tidak tersedia"}), 503\n\n    url = request.form.get("url")\n    file = request.files.get("file")\n\n    if not url and not file:\n        return jsonify({"ok": False, "error": "Kirim file atau url"}), 400\n\n    if url:\n        import requests\n        r = requests.get(url, timeout=20)\n        r.raise_for_status()\n        img = Image.open(io.BytesIO(r.content)).convert("RGB")\n        src = url\n    else:\n        img = Image.open(file.stream).convert("RGB")\n        src = file.filename\n\n    h = str(imagehash.phash(img))\n    data = _load_json()\n    data[h] = {"source": src, "ts": int(time.time())}\n    _save_json(data)\n\n    try:\n        from nixe.bot.modules.discord_bot.helpers.image_hashing import refresh_external_phash_store  # type: ignore\n        refresh_external_phash_store(_json_path())\n    except Exception:\n        pass\n\n    return jsonify({"ok": True, "hash": h, "count": len(data)})\n\n@api_bp.get("/phish/phash")\ndef list_phash():\n    return jsonify(_load_json())\n\n@api_bp.post("/ocr")\ndef ocr_image():\n    url = request.form.get("url")\n    file = request.files.get("file")\n\n    if not url and not file:\n        return jsonify({"ok": False, "error": "Kirim file atau url"}), 400\n\n    if url:\n        import requests\n        r = requests.get(url, timeout=20)\n        r.raise_for_status()\n        img = Image.open(io.BytesIO(r.content))\n    else:\n        img = Image.open(file.stream)\n\n    text, err = None, None\n    try:\n        import pytesseract\n        text = pytesseract.image_to_string(img)\n    except Exception as e:\n        err = f"pytesseract: {e}"\n        try:\n            import numpy as np, easyocr  # type: ignore\n            reader = easyocr.Reader(["id", "en"], gpu=False)\n            res = reader.readtext(np.array(img))\n            text = "\n".join([x[1] for x in res])\n        except Exception as e2:\n            err += f" | easyocr: {e2}"\n\n    if text is None:\n        return jsonify({"ok": False, "error": err or "OCR tidak tersedia"}), 503\n    return jsonify({"ok": True, "text": text})
\nimport os\nimport os, json, pathlib, psutil\n\nclass MetricsStore:\n    def __init__(self, prefer_path: str | None = None, ttl_seconds: int = 120):\n        self.ttl = int(ttl_seconds)\n        self.candidates = []\n        if prefer_path:\n            self.candidates.append(str(prefer_path))\n        self.candidates += [\n            os.getenv("METRICS_FILE") or "",\n            "data/metrics.json",\n            "nixe/data/metrics.json",\n            str(pathlib.Path(__file__).resolve().parents[2] / "data" / "metrics.json"),\n        ]\n\n    def _read_json(self, p: str):\n        try:\n            with open(p, "r", encoding="utf-8") as f:\n                return json.load(f)\n        except Exception:\n            return {}\n\n    def read(self) -> dict:\n        path = None\n        for cand in self.candidates:\n            if cand and os.path.exists(cand):\n                path = cand\n                break\n        data = self._read_json(path) if path else {}\n        # Enrich with host stats if missing\n        if "cpu" not in data:\n            try:\n                data["cpu"] = psutil.cpu_percent(interval=None)\n            except Exception:\n                data["cpu"] = 0.0\n        if "ram_mb" not in data:\n            try:\n                data["ram_mb"] = round(psutil.virtual_memory().used / (1024*1024), 2)\n            except Exception:\n                data["ram_mb"] = 0.0\n        return data
# -*- coding: utf-8 -*-
from __future__ import annotations

import os, logging, asyncio, discord
from discord.ext import commands

log = logging.getLogger(__name__)

intents = discord.Intents.default()
intents.guilds = True
intents.members = True
intents.presences = True
intents.message_content = True

def _get_prefix() -> str:
    pref = os.getenv("COMMAND_PREFIX")
    if pref:
        return pref
    try:
        from nixe.config import load as _load_cfg  # type: ignore
        pref = (_load_cfg() or {}).get("COMMAND_PREFIX", "!")
    except Exception:
        pref = "!"
    return pref or "!"

allowed_mentions = discord.AllowedMentions(everyone=False, users=True, roles=False, replied_user=False)
bot = commands.Bot(command_prefix=_get_prefix(), intents=intents, allowed_mentions=allowed_mentions)

@bot.event
async def on_connect():
    log.info("ðŸ”Œ on_connect")

@bot.event
async def on_disconnect():
    log.warning("ðŸ”Œ on_disconnect")

async def start_bot(token: str | None = None):
    token = (token or os.getenv("DISCORD_TOKEN") or os.getenv("BOT_TOKEN") or "").strip()
    if not token:
        try:
            from nixe.config import load as _load_cfg  # type: ignore
            token = (_load_cfg() or {}).get("BOT_TOKEN", "") or ""
        except Exception:
            token = ""
    token = token.strip()
    if not token:
        raise RuntimeError("DISCORD_TOKEN / BOT_TOKEN kosong (ENV atau module config).")

    try:
        from .handlers_crucial import wire_handlers
        await wire_handlers(bot)
        log.info("ðŸ”§ Crucial handlers wired.")
    except Exception as e:
        log.error("wire_handlers failed: %s", e, exc_info=True)

    try:
        await bot.start(token)
    except asyncio.CancelledError:
        pass
    except Exception as e:
        log.exception("bot.start failed: %s", e)
        raise
    finally:
        try:
            await bot.close()
        except asyncio.CancelledError:
            pass
        except Exception:
            pass

async def shutdown():
    try:
        if not bot.is_closed():
            await bot.close()
    except asyncio.CancelledError:
        pass
    except Exception:
        pass

def get_bot() -> commands.Bot:
    return bot

# -*- coding: utf-8 -*-\nimport os\nfrom __future__ import annotations\n\nimport os, logging, asyncio, discord\nfrom discord.ext import commands\n\nlog = logging.getLogger(__name__)\n\nintents = discord.Intents.default()\nintents.guilds = True\nintents.members = True\nintents.presences = True\nintents.message_content = True\n\ndef _get_prefix() -> str:\n    pref = os.getenv("COMMAND_PREFIX")\n    if pref:\n        return pref\n    try:\n        from nixe.config import load as _load_cfg  # type: ignore\n        pref = (_load_cfg() or {}).get("COMMAND_PREFIX", "!")\n    except Exception:\n        pref = "!"\n    return pref or "!"\n\nallowed_mentions = discord.AllowedMentions(everyone=False, users=True, roles=False, replied_user=False)\n\ncurrent_bot = None\n\ndef build_bot() -> commands.Bot:\n    global current_bot\n    # Fresh Bot instance each run\n    allowed_mentions = discord.AllowedMentions(everyone=False, roles=False, users=True, replied_user=False)\n    bot = commands.Bot(command_prefix=_get_prefix(), intents=intents, allowed_mentions=allowed_mentions)\n    current_bot = bot\n    return bot\n\n\n\nasync def start_bot(token: str):\n    bot = build_bot()\n    # Wire crucial handlers (optional)\n    try:\n        from .handlers_crucial import wire_handlers  # type: ignore\n    except Exception:\n        wire_handlers = None\n    if wire_handlers:\n        try:\n            await wire_handlers(bot)\n            log.info("ðŸ”§ Crucial handlers wired.")\n        except Exception as e:\n            log.error("wire_handlers failed: %s", e, exc_info=True)\n    # Fresh HTTP session lifecycle per instance\n    async with bot:\n        try:\n            await bot.start(token)\n        except asyncio.CancelledError:\n            pass\n        except Exception as e:\n            log.exception("bot.start failed: %s", e)\n            raise\n\n        except asyncio.CancelledError:\n            pass\n        except Exception:\n            pass\n\nasync def shutdown():\n    global current_bot\n    try:\n        if current_bot and not current_bot.is_closed():\n            await current_bot.close()\n    except asyncio.CancelledError:\n        pass\n    except Exception:\n        pass\n\ndef get_bot() -> commands.Bot | None:\n    return current_bot
import os\nimport os\nfrom dataclasses import dataclass\nfrom typing import List, Set\n\ndef _bool(name: str, default: bool=False) -> bool:\n    v = os.getenv(name)\n    if v is None: return default\n    return v.strip().lower() in ("1","true","yes","on","y")\n\ndef _int(name: str, default: int) -> int:\n    try:\n        return int(os.getenv(name, str(default)).strip())\n    except Exception:\n        return default\n\ndef _csv_set(name: str) -> Set[int]:\n    v = os.getenv(name) or ""\n    out: Set[int] = set()\n    for tok in [t.strip() for t in v.replace(";",",").split(",") if t.strip()]:\n        if tok.isdigit():\n            out.add(int(tok))\n    return out\n\ndef _csv_list(name: str) -> list[str]:\n    v = os.getenv(name) or ""\n    return [t.strip() for t in v.replace(";",",").split(",") if t.strip()]\n\n@dataclass\nclass ImageGuardCfg:\n    enable_autoban: bool\n    phash_distance_strict: int\n    phash_distance_lenient: int\n    db_thread_id: int\n    db_channel_id: int\n    whitelist_roles: Set[int]\n    delete_message_days: int\n    warmup_seconds: int\n    ban_cooldown_seconds: int\n    ban_ceiling_per_10min: int\n    quarantine_minutes: int\n    ban_only_newer_than_days: int\n\n@dataclass\nclass LinkGuardCfg:\n    enable_automod: bool\n    autoban_on_match: bool\n    db_channel_id: int\n    blacklist_domains: list[str]\n    regexes: list[str]\n    delete_message_days: int\n\n@dataclass\nclass AppCfg:\n    token: str\n    log_level: str\n    mod_log_channel_id: int\n    mod_log_channel_name: str\n    image: ImageGuardCfg\n    link: LinkGuardCfg\n\ndef load() -> AppCfg:\n    token = os.getenv("BOT_TOKEN","").strip()\n    level = os.getenv("LOG_LEVEL","INFO").upper()\n\n    image = ImageGuardCfg(\n        enable_autoban=_bool("ENABLE_PHISH_AUTOBAN", True),\n        phash_distance_strict=_int("PHASH_DISTANCE_STRICT", 4),\n        phash_distance_lenient=_int("PHASH_DISTANCE_LENIENT", 6),\n        db_thread_id=_int("PHISH_DB_THREAD_ID", 0),\n        db_channel_id=_int("PHISH_DB_CHANNEL_ID", 0),\n        whitelist_roles=_csv_set("PHISH_WHITELIST_ROLES"),\n        delete_message_days=_int("DELETE_MESSAGE_DAYS", 1),\n        warmup_seconds=_int("WARMUP_SECONDS", 120),\n        ban_cooldown_seconds=_int("BAN_COOLDOWN_SECONDS", 20),\n        ban_ceiling_per_10min=_int("BAN_CEILING_PER_10MIN", 5),\n        quarantine_minutes=_int("QUARANTINE_MINUTES", 60),\n        ban_only_newer_than_days=_int("BAN_ONLY_NEWER_THAN_DAYS", 14),\n    )\n\n    link = LinkGuardCfg(\n        enable_automod=_bool("ENABLE_LINK_AUTOMOD", True),\n        autoban_on_match=_bool("LINK_AUTOBAN_ON_MATCH", False),\n        db_channel_id=_int("LINK_DB_CHANNEL_ID", 0),\n        blacklist_domains=_csv_list("LINK_BLACKLIST"),\n        regexes=_csv_list("LINK_REGEXES"),\n        delete_message_days=_int("DELETE_MESSAGE_DAYS", 1)\n    )\n\n    mod_log_channel_id = _int("MOD_LOG_CHANNEL_ID", 0)\n    mod_log_channel_name = os.getenv("MOD_LOG_CHANNEL_NAME", "log-botphising")\n    return AppCfg(token, level, mod_log_channel_id, mod_log_channel_name, image, link)
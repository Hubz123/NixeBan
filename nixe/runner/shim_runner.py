import os\nfrom __future__ import annotations\nimport os, logging, discord\nfrom discord.ext import commands\n\n# Load (and apply) ban dedupe patch early\ntry:\n    from ..patches import ban_dedupe  # noqa: F401\nexcept Exception:\n    pass\n\nlog = logging.getLogger(__name__)\n\n# ===== Intents =====\nintents = discord.Intents.default()\nintents.guilds = True\nintents.members = os.getenv("INTENTS_MEMBERS", "0") in ("1","true","TRUE")\nintents.presences = os.getenv("INTENTS_PRESENCES", "0") in ("1","true","TRUE")\nintents.message_content = True  # ensure enabled on portal\n\nPREFIX = os.getenv("COMMAND_PREFIX", "!")\nallowed_mentions = discord.AllowedMentions(\n    everyone=False, users=True, roles=False, replied_user=False\n)\nbot = commands.Bot(command_prefix=PREFIX, intents=intents, allowed_mentions=allowed_mentions)\n\n@bot.event\nasync def setup_hook():\n    # Auto-load all cogs using Leina-style loader\n    try:\n        await bot.load_extension("nixe.cogs.loader_leina")\n    except Exception as e:\n        log.error("Failed to load Nixe loader: %s", e, exc_info=True)\n\n@bot.event\nasync def on_ready():\n    try:\n        log.info("✅ Bot login as %s (%s)", bot.user, bot.user.id if bot.user else "?")\n    except Exception:\n        log.info("✅ Bot login.")\n\nasync def start_bot():\n    token = os.getenv("DISCORD_TOKEN") or os.getenv("BOT_TOKEN")\n    if not token:\n        raise RuntimeError("ENV DISCORD_TOKEN / BOT_TOKEN not set")\n    await bot.start(token)
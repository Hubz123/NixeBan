"""\nFlask entry for NIXE (single process friendly)\n- Stable /healthz and /uptime (200)\n- Quiet logs for health endpoints\n- Registers dashboard web UI (blueprints, static alias, themes)\n- /botlive now uses the same live stats source as /api/live/stats (freshness-based)\n"""\nimport os\nfrom __future__ import annotations\n\nimport os, time, logging\nfrom typing import Optional, Tuple\nfrom flask import Flask, jsonify, Response, redirect, request\n\n_START_TS = time.time()\n\nclass _HealthAccessFilter(logging.Filter):\n    SILENT = ("/healthz", "/uptime")\n    def filter(self, record: logging.LogRecord) -> bool:\n        try:\n            msg = record.getMessage()\n        except Exception:\n            msg = str(record.msg)\n        return not any(s in msg for s in self.SILENT)\n\ndef _probe_bot() -> Tuple[bool, Optional[int], Optional[float]]:\n    """\n    Determine bot liveness using the same data used by /api/live/stats.\n    Rule: consider alive if metrics 'ts' is fresh (<300s) AND (online>0 or guilds>=1).\n    Returns (alive, guilds, latency_ms)\n    """\n    alive = False; guilds = None; latency_ms = None\n    now = int(time.time())\n    try:\n        # Import the live metrics reader used by dashboard API\n        from nixe.dashboard.webui import _read_metrics_payload  # type: ignore\n        data = _read_metrics_payload()\n        if isinstance(data, dict):\n            ts = int(data.get("ts") or 0)\n            guilds = data.get("guilds")\n            online = data.get("online") or 0\n            latency_ms = data.get("latency_ms")\n            fresh = (now - ts) < 300 if ts else False\n            alive = bool(fresh and ((online and online > 0) or (guilds and guilds >= 1)))\n    except Exception:\n        # Fallback to optional internal state (if available)\n        try:\n            from nixe.bot.modules.discord_bot import live_metrics  # type: ignore\n            st = getattr(live_metrics, "STATE", None)\n            if st and isinstance(st, dict):\n                guilds = st.get("guilds")\n                latency_ms = st.get("latency_ms")\n                alive = bool(st.get("alive", False))\n        except Exception:\n            pass\n    return alive, guilds, latency_ms\n\ndef create_app() -> Flask:\n    app = Flask(__name__)\n    app.secret_key = os.environ.get("FLASK_SECRET_KEY", "dev")\n\n    # Quiet werkzeug access log for health checks\n    try:\n        wz = logging.getLogger("werkzeug")\n        wz.addFilter(_HealthAccessFilter())\n        app.logger.addFilter(_HealthAccessFilter())\n    except Exception:\n        pass\n\n    # ------------------- Basic routes -------------------\n    @app.route("/healthz", methods=["GET", "HEAD"])\n    def _healthz() -> Response:\n        if request.method == "HEAD":\n            return Response(status=200)\n        return Response("ok", status=200, mimetype="text/plain")\n\n    @app.route("/uptime", methods=["GET", "HEAD"])\n    def _uptime():\n        if request.method == "HEAD":\n            return Response(status=200)\n        now = time.time()\n        return jsonify({\n            "uptime_s": int(now - _START_TS),\n            "pid": os.getpid(),\n            "port": int(os.environ.get("PORT", "10000")),\n            "ts": int(now)\n        })\n\n    # Root -> dashboard\n    @app.route("/", methods=["GET"])\n    def _root():\n        return redirect("/dashboard", code=302)\n\n    # Bot liveness derived from live stats freshness\n    @app.get("/botlive")\n    def _botlive():\n        alive, guilds, latency_ms = _probe_bot()\n        return jsonify({"alive": alive, "guilds": guilds, "latency_ms": latency_ms}), (200 if alive else 503)\n\n    # ------------------- Register dashboard web UI -------------------\n    try:\n        from nixe.dashboard.webui import register_webui_builtin  # type: ignore\n        register_webui_builtin(app)\n    except Exception as e:\n        app.logger.warning("dashboard webui not registered: %s", e)\n\n    return app\n\n# WSGI entry for gunicorn or direct run\napp = create_app()\n\n# --- robots.txt (lightweight; good for Free plan) ---\ntry:\n    from flask import Response\nexcept Exception:\n    Response = None\n\nif Response is not None and 'robots_txt' not in globals():\n    @app.route("/robots.txt", methods=["GET", "HEAD"])\n    def robots_txt():\n        # Disallow crawling API/dashboard; allow root. Cache for 1 day.\n        body = "User-agent: *\nDisallow: /api/\nDisallow: /dashboard\nAllow: /\n"\n        resp = Response(body, mimetype="text/plain; charset=utf-8")\n        resp.headers.setdefault("Cache-Control", "public, max-age=86400, immutable")\n        return resp\n# --- end robots.txt ---